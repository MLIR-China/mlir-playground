diff --git a/mlir/include/mlir/IR/Threading.h b/mlir/include/mlir/IR/Threading.h
index 384223161014..285eeefe78fb 100644
--- a/mlir/include/mlir/IR/Threading.h
+++ b/mlir/include/mlir/IR/Threading.h
@@ -39,48 +39,10 @@ LogicalResult failableParallelForEach(MLIRContext *context, IteratorT begin,
   if (numElements == 0)
     return success();
 
-  // If multithreading is disabled or there is a small number of elements,
-  // process the elements directly on this thread.
-  // FIXME: ThreadPool should allow work stealing to avoid deadlocks when
-  // scheduling work within a worker thread.
-  if (!context->isMultithreadingEnabled() || numElements <= 1 ||
-      context->getThreadPool().isWorkerThread()) {
-    for (; begin != end; ++begin)
-      if (failed(func(*begin)))
-        return failure();
-    return success();
-  }
-
-  // Build a wrapper processing function that properly initializes a parallel
-  // diagnostic handler.
-  ParallelDiagnosticHandler handler(context);
-  std::atomic<unsigned> curIndex(0);
-  std::atomic<bool> processingFailed(false);
-  auto processFn = [&] {
-    while (!processingFailed) {
-      unsigned index = curIndex++;
-      if (index >= numElements)
-        break;
-      handler.setOrderIDForThread(index);
-      if (failed(func(*std::next(begin, index))))
-        processingFailed = true;
-      handler.eraseOrderIDForThread();
-    }
-  };
-
-  // Otherwise, process the elements in parallel.
-  llvm::ThreadPool &threadPool = context->getThreadPool();
-  size_t numActions = std::min(numElements, threadPool.getThreadCount());
-  SmallVector<std::shared_future<void>> threadFutures;
-  threadFutures.reserve(numActions - 1);
-  for (unsigned i = 1; i < numActions; ++i)
-    threadFutures.emplace_back(threadPool.async(processFn));
-  processFn();
-
-  // Wait for all of the threads to finish.
-  for (std::shared_future<void> &future : threadFutures)
-    future.wait();
-  return failure(processingFailed);
+  for (; begin != end; ++begin)
+    if (failed(func(*begin)))
+      return failure();
+  return success();
 }
 
 /// Invoke the given function on the elements in the provided range
